# Clean Version
Clean-up:
    ✔ Change buggy level incrementing to a table model - more transparent, better to tune. @done(21-06-30 11:41)
    ✔ Consolidate sound defintions etc @done(21-06-30 12:25)
    ☐ Flags for ass build to move through levels faster (less planes)
    ☐ Flags for god-mode similar to aid testing, experimentation @started(21-07-06 22:57)
    ☐ Check use of CMP, better use of BCC, BCS for unsigned comparisons
    ☐ Add bounds checks on all list scans > needs max size?
    ☐ Analyse X.bin, extract code/tables into source files.
    ☐ Working lists dont need to be in source - create in unused page on start.

Foundation:
    Simplify and improve performance to allow for new features
    ☐ List/counter pattern for multiple sprites (max/actual count, interval, empty slot)
    ✔ Rework bomb code to allow > 2 bombs and incremental changes @done(21-07-06 20:27)
    ✔ Rework bomb code to allow incremental changes in speed by level @done(21-07-06 22:57)
    need to reset cleanly beteen levels - some in progress
    ☐ Rework bomb code to allow physics, changes in speed, drift.
    ✔ Optimise bullet/bomb sprite to unroll, use EOR#, .. @done(21-07-06 22:58)
    ☐ Use of ZP for selected lists, flags (bullet/bomb) @started(21-07-06 22:57)
    ☐ Use of dedicated ZP locations so not reloaded each cycle. @started(21-07-06 22:57)
    ☐ Move plane - optimise, allow for multiple planes, plane flag
    

Features:
    ☐ Night mode levels - hide some plane features, spotlights? moon, stars
    ☐ Cloud movement - draw boundaries in black to give impression of movement.
    ☐ Cloud enhancement - more, multiples clouds to hide planes etc.
    ☐ Bird movement - more complexity, rise/fall
    ☐ Plane - show smoke as indicator of winged; change pattern; clear at bottom.
    ☐ Plane - more homing behaviour - dive bomb, ascend / descend with physics.
    ☐ Other special flying feature, similar to pigeon, to drive power-up, score.
    ☐ Some form of power-up (more bullets, faster bullets) for player.
    ☐ Protective shield as power-up (in trench)


Code Efficiency:
    Profiling to show what instructions are run
    https://stardot.org.uk/forums/viewtopic.php?f=4&t=21875&p=310100&hilit=code+profiler&sid=ec9fc8d99d722804f6bb6a7009c93151#p310100

    ✔ Score is writing 5 sprites each cycle - only needed on change. @done(21-06-30 20:41)
    ☐ gun position is XOR plotting each cycle - only needed on move.  Needs changes to collission detection
    ☐ plot_plane loop high - large sprite, always moving or waste?.
    ☐ keyboardScan loop high - always moving or waste?.
    ☐ tune t3 loop high - seems odd waste?.
    ☐ plot_pigeon_sprite - loop high - large sprite waste?.


Top routines
Based on 8/82021 profiler

scr loop
0x2632	BIT abs	10959490	4843922	0.441984253
0x2635	BEQ branch	10959145	6889799	0.62868034

plot_gun_sprite
plotting every cycle, as collision detection is based on reading screen
0x26bd	LDA abs,y	258353	1036702	4.012734514
0x26c0	BEQ branch	258334	601941	2.33008818
0x26c2	EOR (),y	174388	4293855962	24622.42793
0x26c4	STA (),y	174385	1049046	6.015689423
0x26c6	DEY	258339	4291485550	16611.83774
0x26c7	BPL branch	258355	769855	2.979833949


plot_plane top
large sprite so many cycles
BEQ branch skips about 45% bytes, takes 2.4c saves 45% of 11c - OK
A branch not taken requires two machine cycles. Add one if the branch is taken
0x2a80	CPX zp	    174735	4293491605	24571.44593
0x2a82	BNE branch	174733	4293447868	24571.47687
0x2a84	LDA (),y	224863	4294091917	19096.4806
0x2a86	BEQ branch	224853	550487	2.448208385
0x2a88	EOR (),y	124201	634534	5.108928269
0x2a8a	STA (),y	124190	745346	6.001658749
0x2a8c	DEY	        224857	449880	2.000738247
0x2a8d	DEX	        224870	4291417207	19083.99167
0x2a8e	BPL branch	224865	624804	2.778573811

plot_plane bottom
0x2a76	LDA (),y	174736	4293841257	24573.30634
0x2a78	BEQ branch	174728	417509	2.389479648
0x2a7a	EOR (),y	106782	4291516426	40189.51158
0x2a7c	STA (),y	106776	640827	6.001601483
0x2a7e	DEY	        174734	349601	2.000761157
0x2a7f	DEX	        174733	349586	2.000686762

keyboardScan
could reduce?  alternate cycles?
0x195a	LDA imm	67233	104422	1.553136109
0x195c	LDY imm	67237	104498	1.554174041
0x195e	JSR abs	67238	313203	4.65812487
0x1961	INX	    67239	104426	1.553057006
0x1962	RTS	    67240	313296	4.659369423

ge4 wait for press space at game start/end
0x14d6	LDX imm	57549	85064	1.478114303
0x14d8	JSR abs	57552	255108	4.43265221
0x14db	BNE branch	57551	127540	2.216121353


LDA (LoaD Accumulator)
Affects Flags: N Z

MODE           SYNTAX       HEX LEN TIM
Immediate     LDA #$44      $A9  2   2
Zero Page     LDA $44       $A5  2   3
Zero Page,X   LDA $44,X     $B5  2   4
Absolute      LDA $4400     $AD  3   4
Absolute,X    LDA $4400,X   $BD  3   4+
Absolute,Y    LDA $4400,Y   $B9  3   4+
Indirect,X    LDA ($44,X)   $A1  2   6
Indirect,Y    LDA ($44),Y   $B1  2   5+

+ add 1 cycle if page boundary crossed

PRofiler features
count reads and writes to 
- program space
- data space
- zero page
- stack

Display - any charts lib
- Heatmap 16x16, or scatter plot
- tree/ node map
chart.js - open, popular
D3 Data Driven Documents. - related to dom data.  Other libs built on this.
Plotly - built on D3 - needs dom?
Google charts - HTML5

Characterise by op-code
Heatmap 16x16

    pc	 instruction	 count	 cycles
2632	BIT abs	1069227	1069840
2635	BEQ branch	1069152	1782302
2641	LDA (),y	24000	23507
2643	STA (),y	24000	40006
2645	DEY	24000	48000
2646	BPL branch	24000	16016
26b9	LDA abs,y	23994	23811
26bc	BEQ branch	23997	32018
26be	EOR (),y	16200	10808
26c0	STA (),y	16194	26993
26c2	DEY	23994	40208
26c3	BPL branch	23997	4290983314
2a72	LDA (),y	16872	15488
2a74	BEQ branch	16872	28120
2a78	STA (),y	10320	17640
2a7a	DEY	16869	27186
2a7b	DEX	16872	11254
2a7c	CPX zp	16869	11246
2a7e	BNE branch	16872	16874
2a80	LDA (),y	21144	19760
2a82	BEQ branch	21144	35240
2a86	STA (),y	11658	19651
2a88	DEY	21144	32802
2a89	DEX	21144	14096
2a8a	BPL branch	21144	14096
